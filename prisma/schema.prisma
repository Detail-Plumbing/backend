// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(30)
  email       String        @unique @db.VarChar(30)
  roles       RoleUser[]
  tools       ToolUser[]
  avatar      String        @default("") @db.VarChar(200)
  lastName    String        @db.VarChar(30)
  password    String        @db.VarChar(200)
  createdAt   DateTime?     @default(now())
  workingDay  WorkingDay[]
  ProjectUser ProjectUser[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(30)
  users       RoleUser[]
  permissions RolePermission[]
}

model RolePermission {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(30)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int
}

model RoleUser {
  id     Int  @id @default(autoincrement())
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId Int
  userId Int
}

enum ProjectStatus {
  WON
  LOST
  HOLD
  NOT_SET
  PENDING
  PROGRESS
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(80)
  note         String        @default("") @db.VarChar(200)
  status       ProjectStatus @default(PROGRESS)
  address      String        @default("") @db.VarChar(200)
  createdAt    DateTime?     @default(now())
  description  String        @db.VarChar(280)
  ProjectUser  ProjectUser[]
  shippingDate String?
}

model ProjectUser {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model Inventory {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(80)
  tools       Tool[]
  createdAt   DateTime? @default(now())
  description String    @db.VarChar(280)
}

model Tool {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(80)
  inventory   Inventory  @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  toolUser    ToolUser[]
  inventoryId Int
}

model ToolUser {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool   Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)
  userId Int
  toolId Int
}

model WorkingDay {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  endTime   DateTime?
  startTime DateTime  @default(now())
  createdAt DateTime? @default(now())
}
